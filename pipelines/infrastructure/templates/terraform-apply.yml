parameters:
  - name: terraformVersion
    default: ''
  - name: terraformHome
    default: /tmp
  - name: ServiceConnection
    default: ''
  - name: Environment
    default: ''

jobs:
  - deployment: apply
    displayName: 'Apply Phase'
    timeoutInMinutes: 360
    #dependsOn: plan
    condition: and(succeeded(), in(variables['Build.Reason'], 'PullRequest', 'IndividualCI', 'BatchedCI', 'Manual'))
    #condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), eq(dependencies.plan.result,'Succeeded'), or(eq(variables['Build.SourceBranch'], 'refs/heads/main'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')))
    environment: "${{ parameters.Environment }}"
    strategy:
      runOnce:
        deploy:
          steps:
            # Disable automatic downloads of all pipeline artifacts.
            - download: none

            - checkout: self

            # Download the artifact(s) specific for this environment.
            - task: DownloadBuildArtifacts@0
              displayName: "Download Terraform Artifacts"
              inputs:
                artifactName: "${{ parameters.Environment }}-terraform-plan"
                downloadPath: "$(Pipeline.Workspace)"

            # Get subscription info that Terraform needs and store it in environmental variables.
            # https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/guides/service_principal_client_secret#configuring-the-service-principal-in-terraform
            - task: AzureCLI@2
              displayName: 'Set Authentication Variables'
              inputs:
                azureSubscription: ${{ parameters.ServiceConnection }}
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  $subscriptionId = (az account list | ConvertFrom-Json | Where-Object -Property isDefault -Value true -EQ).id
                  Write-Output "##vso[task.setvariable variable=CLIENT_ID;isSecret=true;isOutput=false]$Env:servicePrincipalId"
                  Write-Output "##vso[task.setvariable variable=CLIENT_SECRET;isSecret=true;isOutput=false]$Env:servicePrincipalKey"
                  Write-Output "##vso[task.setvariable variable=TENANT_ID;isSecret=false;isOutput=false]$Env:tenantId"
                  Write-Output "##vso[task.setvariable variable=SUBSCRIPTION_ID;isSecret=false;isOutput=false]$subscriptionId"
                addSpnToEnvironment: true
                useGlobalConfig: true

            # Download the sepcified version of Terraform and unzip it.
            - task: Bash@3
              displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
              inputs:
                targetType: 'inline'
                script: |
                  echo "Downloading from: https://releases.hashicorp.com/terraform/${{ parameters.terraformVersion}}/terraform_${{ parameters.terraformVersion }}_linux_amd64.zip"
                  echo "Destination: ${{ parameters.terraformHome }}/terraform.zip"
                  curl https://releases.hashicorp.com/terraform/${{ parameters.terraformVersion }}/terraform_${{ parameters.terraformVersion }}_linux_amd64.zip --output ${{ parameters.terraformHome }}/terraform.zip
                  unzip -u ${{ parameters.terraformHome }}/terraform.zip -d ${{ parameters.terraformHome }}

            # Run Terraform Init. We pass the Instance ID as the container name for the state file(s) so that we can keep the state files for instance seperate.
            - task: AzureCLI@2
              displayName: 'Terraform Init'
              inputs:
                azureSubscription: ${{ parameters.ServiceConnection }}
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
                inlineScript: |
                  export ARM_CLIENT_ID=$(CLIENT_ID)
                  export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
                  export ARM_TENANT_ID=$(TENANT_ID)
                  export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)

                  ${{ parameters.terraformHome }}/terraform init \
                  -backend-config="key=$${{ parameters.Environment }}.terraform.tfstate" \
                  -no-color
                addSpnToEnvironment: true
                useGlobalConfig: true

            # Run Terraform Apply.
            - task: AzureCLI@2
              displayName: 'Terraform Apply'
              inputs:
                azureSubscription: ${{ parameters.ServiceConnection }}
                scriptType: 'bash'
                scriptLocation: 'inlineScript'
                workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
                inlineScript: |
                  export ARM_CLIENT_ID=$(CLIENT_ID)
                  export ARM_CLIENT_SECRET=$(CLIENT_SECRET)
                  export ARM_TENANT_ID=$(TENANT_ID)
                  export ARM_SUBSCRIPTION_ID=$(SUBSCRIPTION_ID)

                  echo "${{ parameters.terraformHome }}/terraform apply \
                  -auto-approve \
                  -no-color \
                  -input=false \
                  $(Pipeline.Workspace)/${{ parameters.Environment }}-terraform-plan/${{ parameters.Environment }}.tfplan"

                  ${{ parameters.terraformHome }}/terraform apply \
                  -auto-approve \
                  -no-color \
                  -input=false \
                  $(Pipeline.Workspace)/${{ parameters.Environment }}-terraform-plan/${{ parameters.Environment }}.tfplan
                addSpnToEnvironment: true
                useGlobalConfig: true
